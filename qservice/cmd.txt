##########################Before running services#######################3
1. install bridge cni
curl -L -o cni-plugins.tgz https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz
sudo mkdir -p /opt/cni/bin
sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz

cat << EOF | sudo tee /etc/cni/net.d/10-containerd-net.conflist
{
  "cniVersion": "1.0.0",
    "name": "containerd-net",
    "plugins": [
      {
        "type": "bridge",
        "bridge": "cni0",
        "isGateway": true,
        "ipMasq": true,
        "promiscMode": true,
        "ipam": {
          "type": "host-local",
          "ranges": [
            [{
              "subnet": "10.22.0.0/16"

            }]

          ],
          "routes": [
          { "dst": "0.0.0.0/0" }
          ]
        }
      },
      {
        "type": "portmap",
        "capabilities": {"portMappings": true}
      }
  ]
}
EOF
sudo systemctl restart containerd
sudo chmod 777 /run/containerd/containerd.sock

2. config quark shim for containerd

cat <<EOF | sudo tee /etc/containerd/config.toml
version = 2
[plugins."io.containerd.runtime.v1.linux"]
  shim_debug = false
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  runtime_type = "io.containerd.runc.v2"
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.quark]
  runtime_type = "io.containerd.quark.v1"
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.quarkd]
  runtime_type = "io.containerd.quarkd.v1"
EOF

3. Enable shim mode in config.json

in config.json, set "ShimMode" to true

4. Enable PerSandboxLog in config.json so that different container has different log name
in config.json, set "PerSandboxLog" to true

#########################Running Services##################################

1. Start cadvisor

VERSION=v0.36.0 # use the latest release version from https://github.com/google/cadvisor/releases
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  --privileged \
  --device=/dev/kmsg \
  --rm \
  gcr.io/cadvisor/cadvisor:$VERSION

2. Start etcd

export NODE1=127.0.0.1
REGISTRY=quay.io/coreos/etcd

docker volume create --name etcd-data
export DATA_DIR="etcd-data"

sudo docker run \
  -p 2379:2379 \
  -p 2380:2380 \
  --rm \
  --volume=${DATA_DIR}:/etcd-data \
  --name etcd ${REGISTRY}:latest \
  /usr/local/bin/etcd \
  --data-dir=/etcd-data --name node1 \
  --initial-advertise-peer-urls http://${NODE1}:2380 --listen-peer-urls http://0.0.0.0:2380 \
  --advertise-client-urls http://${NODE1}:2379 --listen-client-urls http://0.0.0.0:2379 \
  --initial-cluster node1=http://${NODE1}:2380


3. Build 
cd Quark/qservice
make

4. Run qlet
cd Quark/qservice/target/debug
rm -f /var/log/quark/na.log; sudo ./na


////////////////////////////////////////////////////////////////////

1. change container runtime 

in qservice/qshare/src/config.rs
change pub const DefaultRuntimeHandler             : &str = "quarkd" to "runc";


/////////////////////////tsot test////////////////////////////////////////////
1. change container runtime 
Enable tsot in config.json

set EnableTsot to true
set ShimMode to true
set PerSandboxLog to true

2. Start cadvisor/etcd

VERSION=v0.36.0 # use the latest release version from https://github.com/google/cadvisor/releases
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  --privileged \
  --device=/dev/kmsg \
  --rm \
  gcr.io/cadvisor/cadvisor:$VERSION

export NODE1=127.0.0.1
REGISTRY=quay.io/coreos/etcd

#docker volume create --name etcd-data
#export DATA_DIR="etcd-data"

sudo docker run \
  -p 2379:2379 \
  -p 2380:2380 \
  --rm \
  --name etcd ${REGISTRY}:latest \
  /usr/local/bin/etcd \
  --data-dir=/etcd-data --name node1 \
  --initial-advertise-peer-urls http://${NODE1}:2380 --listen-peer-urls http://0.0.0.0:2380 \
  --advertise-client-urls http://${NODE1}:2379 --listen-client-urls http://0.0.0.0:2379 \
  --initial-cluster node1=http://${NODE1}:2380

#--volume=${DATA_DIR}:/etcd-data \
  

export ETCDCTL_API=3
etcdctl get / --prefix

etcdctl put foo bar
etcdctl get foo

3. Run qlet
cd Quark/qservice/target/debug
  rm -f /var/log/quark/na.log; sudo ./na

multiple qlet test

# start service
rm -f /var/log/quark/ss.log; sudo ./ss
# qlet
rm -f /var/log/quark/na.log; sudo ./na /etc/quark/node1.json
# gateway
sudo rm -f /var/log/quark/gateway.log; sudo ./gateway

4. verify etcd configuration

etcdctl get --prefix "/registry"

5. Container Network test

sudo rm -f /var/log/quark/server.log; ./test new server

sudo rm -f /var/log/quark/client.log; ./test new client 10.1.1.1

sudo rm -f /var/log/quark/dns.log; ./test new dns

6. Create namespace

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "revision": 0, "disable": false}' \
  http://localhost:4000/namespaces/

7. CRUD funcpackage
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "name": "name1", "revision": 0, "image": "ubuntu", "commands": ["/test/rust/functest/target/debug/functest"], "envs": [], "mounts": [{"hostpath": "/home/brad/rust/Quark/test", "mountpath": "/test"}]}' \
  http://localhost:4000/funcpackages/

curl http://localhost:4000/funcpackages/t1/ns1/name1

curl --request "DELETE" http://localhost:4000/funcpackages/t1/ns1/name1/

8. Call Func

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "func": "name1", "prompt": "asdfasd"}' \
  http://localhost:4000/funccall/
  
9. Get FuncPods
curl http://localhost:4000/funcpods/t1/ns1/name1

1. change container runtime 
Enable tsot in config.json

set EnableTsot to true
set ShimMode to true
set PerSandboxLog to true

2. Start cadvisor/etcd

VERSION=v0.36.0 # use the latest release version from https://github.com/google/cadvisor/releases
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  --privileged \
  --device=/dev/kmsg \
  --rm \
  gcr.io/cadvisor/cadvisor:$VERSION

export NODE1=127.0.0.1
REGISTRY=quay.io/coreos/etcd

#docker volume create --name etcd-data
#export DATA_DIR="etcd-data"

sudo docker run \
  -p 2379:2379 \
  -p 2380:2380 \
  --rm \
  --name etcd ${REGISTRY}:latest \
  /usr/local/bin/etcd \
  --data-dir=/etcd-data --name node1 \
  --initial-advertise-peer-urls http://${NODE1}:2380 --listen-peer-urls http://0.0.0.0:2380 \
  --advertise-client-urls http://${NODE1}:2379 --listen-client-urls http://0.0.0.0:2379 \
  --initial-cluster node1=http://${NODE1}:2380

#--volume=${DATA_DIR}:/etcd-data \
  
3. Run services

# start state service
rm -f /var/log/quark/ss.log; sudo ./ss
# qlet
rm -f /var/log/quark/quark.log; rm -f /var/log/quark/na.log; sudo ./na /etc/quark/node1.json
# gateway
sudo rm -f /var/log/quark/gateway.log; sudo ./gateway
# scheduler
sudo rm -f /var/log/quark/scheduler.log; sudo ./scheduler

4. verify etcd configuration

etcdctl get --prefix "/registry"

6. Create namespace

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "revision": 0, "disable": false}' \
  http://localhost:4000/namespaces/

#7. CRUD funcpackage
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "funcname": "name1", "revision": 0, 
  "image": "ubuntu", "commands": ["/test/rust/functest/target/debug/functest"], 
  "envs": [], "mounts": [{"hostpath": "/home/brad/rust/Quark/test", "mountpath": "/test"}]}' \
  http://localhost:4000/funcpackages/



curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "funcname": "name1", "revision": 0, 
  "image": "docker.io/library/ws", 
  "commands": ["/usr/bin/python3", "/Quark/test/server1b.py"], 
  "envs": [["LD_LIBRARY_PATH", "/Quark/target/release/:$LD_LIBRARY_PATH"], ["LD_PRELOAD", "/Quark/target/release/libcudaproxy.so"]], 
  "mounts": [{"hostpath": "/home/brad/rust/Quark", "mountpath": "/Quark"}]}' \
  http://localhost:4000/funcpackages/


curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1", "namespace":"ns1", "funcname": "name2", "revision": 0, 
  "image": "docker.io/library/ws", 
  "commands": ["/usr/bin/python3", "/Quark/test/server1b.py"], 
  "envs": [["LD_LIBRARY_PATH", "/Quark/target/release/:$LD_LIBRARY_PATH"], ["LD_PRELOAD", "/Quark/target/release/libcudaproxy.so"]], 
  "mounts": [{"hostpath": "/home/brad/rust/Quark", "mountpath": "/Quark"}]}' \
  http://localhost:4000/funcpackages/


curl http://localhost:4000/funcpackages/t1/ns1/name1

curl --request "DELETE" http://localhost:4000/funcpackages/t1/ns1/name1

8. Call Func
  
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"tenant":"t1xxx", "xxxxx":"nsdddddd1", "dddd": "nfffffame1", "zzz": "asdfasd"}' \
  http://localhost:4000/funccall/t1/ns1/name1


curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"prompt": "Seattle is a"}' \
  http://localhost:4000/funccall/t1/ns1/name1  


9. Get FuncPods
curl http://localhost:4000/funcpods/t1/ns1/name1



#################run with docker ################################33
rm quark.log; sudo docker run -it -p 80:80 --rm --name swap --runtime=quark_d --gpus all --ulimit memlock=-1 --ulimit stack=67108864 -v /home/brad/rust/Quark:/Quark -v /home/brad/rust/model_weight:/model_weight ws bash -c "export LD_LIBRARY_PATH="/Quark/target/release/:$LD_LIBRARY_PATH"; export LD_PRELOAD=/Quark/target/release/libcudaproxy.so; time python3 /Quark/test/server1b.py; exit"

curl -X 'POST' 'http://localhost/funccall' -H 'accept:application/json' -H 'Content-Type:application/json' -d '{"prompt": "Seattle is a"}'

[INFO] [1/43400e0000|0] (24/24)------get call id sys_exit_group arg0:0
[INFO] [1/43400e0000|0] RunExit[43400e0000] ...
[INFO] [1/43400e0000|0] advanceExitStateLocked[24] TaskExitNone=>TaskExitInitiated
[INFO] [1/43400e0000|0] RunExitNotify ...
[INFO] [1/43400e0000|0] advanceExitStateLocked[24] TaskExitInitiated=>TaskExitZombie
[INFO] [1/43400e0000|0] living task count:0
[INFO] [1/43400e0000|0] sendsignalLocked, signal:SignalInfo { Signo: 17, Errno: 0, Code: 1 }, group:true
[INFO] [1/43400e0000|0] sendsignalTimerLocked, signal:SignalInfo { Signo: 17, Errno: 0, Code: 1 }
[INFO] [1/43400e0000|0] Thread[1] Notified of signal Signal(17)
[DEBUG] [1/43400e0000|0] VM: Start clean VMAs - KEY.0 ->
vseg:VMA { offset: 0, realPerms: AccessType(3), effectivePerms: AccessType(3), maxPerms: AccessType(3), private: true, growsDown: false, kernel: true, hint: "Kernel Space" }
vgap:Range { start: 0, len: 274877906944 }
[INFO] [1/45400e0000|0] advanceExitStateLocked[24] TaskExitZombie=>TaskExitDead
[INFO] [1/45400e0000|0] RunInterrupt[45400e0000] ...
[DEBUG] [1/45400e0000|0] task_signals: thread deliver signal SigAction { 
handler: 55c6a3b0cd10, 
flag : 14000000, 
flags::HasRestorer: true, 
flags::IsOnStack: false, 
flags::IsRestart: true, 
flags::IsResetHandler: false, 
flags::IsNoDefer: false, 
flags::IsSigInfo: false, 
restorer : 2b9ba6a42520,  
mask: 0,  
}
[INFO] [1/45400e0000|0] Signal 17: delivering to handler
[INFO] [1/45400e0000|0] start enter user, the address is SigAction { 
handler: 55c6a3b0cd10, 
flag : 14000000, 
flags::HasRestorer: true, 
flags::IsOnStack: false, 
flags::IsRestart: true, 
flags::IsResetHandler: false, 
flags::IsNoDefer: false, 
flags::IsSigInfo: false, 
restorer : 2b9ba6a42520,  
mask: 0,  